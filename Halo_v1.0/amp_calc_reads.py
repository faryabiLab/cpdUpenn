# Ashkan Bigdeli
# 
# 10/28/2016
#
# This program takes in an a depth summary files generated
# by GATK's DepthOfCoverage and compares it to a previously generated
# log2 ratio of reads in previously run normals . 


import sys
from math import log
from collections import OrderedDict
from decimal import Decimal

# sample_reads
#
# @param1 = *sample_summary generated by GATK's DepthOfCoverage
# 
# @return = tuple(sample_name, total_reads)
def sample_reads(depth_summary):
    with open (depth_summary, 'r') as depth_file:
        #skip first line
        depth_file.readline()
        depth_values = depth_file.readline()
        values = depth_values.split('\t')
        sample_name = values[0]
        reads = values[1]
        return (sample_name, reads)
        
# interval normalized - Normalizes loci reads to total sample reads
#
# @param1 = *interval_summary file generated by GATK's DepthOfCoverage
# @param2 =  total reads for sample
#
# @return = a dictionary, key is interval, value is normalized read depth
def interval_normalized(depth_interval, total_reads):
    normalized_dict= {}
    with open(depth_interval, 'r') as interval_in:
        # skip the header line     
        interval_in.readline()
        for line in interval_in:
            values_sample = line.split('\t')
            interval = values_sample[0]
            interval_reads = values_sample[1]
            reads_normed = float(interval_reads)/float(total_reads)
            normalized_dict[interval] = reads_normed
    return normalized_dict
    
# normalize_to_normals - Normalizes loci reads to total sample reads
#                        and normalized to panel of 9 normals
#
# @param1 =  normals_interval - a dictionary of normalized reads from normals
# @param2 =  sample_normed_dict - a dictionary of normalized reads from given sample
#
# @return = a dictionary, key is interval, value is normalized read depth
def normalize_to_normals(normals_intervals, sample_normed_dict):
    interval_dict= OrderedDict()
    with open(normals_intervals, 'r') as normals_intervals:
        for line in normals_intervals:
            line=line.strip('\n')
            values = line.split('\t')
            norm_interval = values[0]
            norm_read = values[1]
            norm_gene = values[2].strip("\r\n")
            if norm_interval in sample_normed_dict:
                sample_normed_normal = (sample_normed_dict.get(norm_interval) / float(norm_read))
                interval_dict.setdefault(norm_interval, [])
                interval_dict[norm_interval].append(sample_normed_normal)
                interval_dict[norm_interval].append(norm_gene)               
    return interval_dict
                
            
# calc_write_avg - takes a dictionary and pretty prints its log2 value
#
# @param1 =  dictionary - final normalized reads
# @param2 =  outfile - name of file to print out
# @param3 = sammple_name - name of sample given for printing purposes
def calc_write_avg(dictionary, out_file, sample_name):
    with open(out_file, 'w') as out:
        out.write('SampleName\tchrom\tpos\tAmp\tGene\n')
        for key,value in dictionary.iteritems():
            #take the log2 value and print
            try:
                log2_avg = log(Decimal(value[0]), 2)
            except:
                log2_avg = 0.0
            
            #split on colon, then - to get chr # and start interval
            key_split = key.split(":")
            chrom = key_split[0]
            key_split_two = key_split[1].split("-")
            start_pos = key_split_two[0]
            out.write(sample_name + '\t' + chrom + '\t'  + start_pos + '\t' + str("%.6f" % log2_avg) + '\t' + value[1] + '\n')





def main():
    
    depth_summary = sys.argv[1]
    interval_summary = sys.argv[2]
    normal_reads = sys.argv[3]
    out_file = sys.argv[4]

    # obtain total # of reads & sample name
    sample_info = sample_reads(depth_summary)
    sample_name = sample_info[0]
    total_reads = sample_info[1]
    
    #generate normalized reads for sample
    sample_dict = interval_normalized(interval_summary, total_reads) 
    normalized_dict = normalize_to_normals(normal_reads, sample_dict) 
    calc_write_avg(normalized_dict, out_file, sample_name)
main()

